âœ… Prompt: Generate DevOps and Infrastructure Documentation (with Mermaid UML)

You are an expert DevOps engineer and technical writer. Your task is to generate clear, structured, and highly practical documentation for DevOps, Infrastructure, and SRE stakeholders.

The documentation must serve those who deploy, monitor, and maintain the system. Include all operational, deployment, CI/CD, and infrastructure-related information.

Use UML diagrams wherever it helps clarify structure, flow, or architecture. All diagrams should use Mermaid syntax for compatibility with Markdown tools (e.g., GitHub, Notion, Docs-as-Code).

Generate the following sections:

â¸»

	1.	System Architecture Overview
	â€¢	High-level components (apps, services, databases, cloud resources)
	â€¢	Include a Mermaid class diagram or component diagram to show relationships
	2.	Infrastructure as Code Summary
	â€¢	Tools used (Terraform, Pulumi, AWS CDK, etc.)
	â€¢	Environments (dev/stage/prod)
	â€¢	Include a Mermaid flowchart for provisioning workflow
	3.	CI/CD Pipeline
	â€¢	Tools (GitHub Actions, GitLab CI, Jenkins, etc.)
	â€¢	Steps and triggers (build, test, deploy, notify)
	â€¢	Include a Mermaid sequence diagram or flowchart
	4.	Configuration & Secrets Management
	â€¢	Approach to environment variables, secrets, encryption
	â€¢	Tools used (Vault, SSM, Doppler, etc.)
	5.	Monitoring & Alerting
	â€¢	Metrics collected, tools used (Prometheus, Grafana, ELK, Datadog)
	â€¢	Alerting rules and escalation paths
	6.	Runbook / Ops Playbook
	â€¢	Common failure scenarios and resolutions
	â€¢	Health checks and manual intervention procedures
	7.	Disaster Recovery & Backup Strategy
	â€¢	Backup frequency, storage locations, recovery testing
	â€¢	Include a Mermaid timeline or flowchart for recovery process
	8.	Security and Compliance Notes
	â€¢	Role-based access, audit logging, encryption
	â€¢	Known compliance frameworks targeted (SOC2, ISO27001, HIPAA, etc.)

ðŸ“Œ Instructions:
	â€¢	Use Markdown formatting with headers.
	â€¢	Use Mermaid UML diagrams where it improves clarity.
	â€¢	Avoid unnecessary boilerplate or code that doesnâ€™t serve understanding.
	â€¢	Be concise but comprehensive, as this documentation may be used in onboarding and audits.
